import {Project} from "../model/Core"
import {ProjectEditor} from "../operations/ProjectEditor"
import {ProjectGenerator} from "../operations/ProjectGenerator"

export class Result {

    constructor(public result: boolean, public message: string) {}

    static Success: Result = new Result(true, "OK")

    static Failure(why: string): Result {
        return new Result(false, why)
    }
}

export interface Definitions {

    Given(s: string, f: (Project, any?) => void): void

    When(s: string, f: (Project, any?) => void): void

    Then(s: string, f: (Project, any?) => Result | boolean): void
    
}

export interface ProjectScenarioWorld {

    /**
     * Edit the project with the given editor, validating parameters
     */
    editWith(ed: ProjectEditor)

    /**
     * Create a project using the given generator, validating parameters
     */
    generateWith(gen: ProjectGenerator)

    /**
     * How many modifications did editors in this scenario make?
     */
    modificationsMade(): number

    /**
     * Did editing fail?
     */
    failed(): boolean

    /**
     * Did the last operation fail due to invalid parameters?
     * Otherwise null
     */
    invalidParameters(): any

    /**
     * How many editors were run in the execution of this scenario?
     */
    editorsRun(): number
}
 
 // Registered with Nashorn by the test runner
declare var com_atomist_rug_test_gherkin_GherkinRunner$_definitions: Definitions

export function Given(s: string, f: (Project, any?) => void) { 
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.Given(s, f) 
}

export function When(s: string, f: (Project, any?) => void) { 
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.When(s, f) 
}

export function Then(s: string, f: (Project, any?) => Result | boolean) { 
    com_atomist_rug_test_gherkin_GherkinRunner$_definitions.Then(s, f) 
}


// Register well-known conditions

Given("an empty project", p => {
    // Nothing to do
})

