import {PathExpressionEngine,TreeNode} from "./PathExpression"
import {TransformingPathExpressionEngine} from "./TransformingPathExpressionEngine"

/**
 * Tries to find an "Ops" class for the given node, and mix in
 * its methods with the node type methods.
 */
export abstract class DecoratingPathExpressionEngine extends TransformingPathExpressionEngine {

    constructor(delegate: PathExpressionEngine) {
        super(delegate, n => {
            //console.log(`Trying to combine with n=${n.nodeName()}`)
            // Also need to parameterize module
            try {
                let ops = this.decoratorFor(n)
                //console.log("Created ops")
                let combined = this.unify(n, ops)
                //console.log(`ops=${ops}, combined=${combined}`)
                return combined
            }
            catch (e) {
                // Not an error: We just didn't find a decorator class
                //console.log(`Can't find decorator for node named ${n.nodeName()}: Expected class name=${this.decoratorClassName(n)}`)
                return n
            }
        })
    }

     /**
    * Add all functions from right to left.
    * Also copies state, which is needed for methods to work.
    */
    protected unify<T, U>(base: T, enricher: U): T & U {
        let monkeyableBase = base as any
        for (let id in enricher) {
            let fun = (<any>enricher)[id]
            monkeyableBase[id] = fun
            //console.log(`Adding function ${id} from right to left: ${fun} from source ${enricher}`)
        }
        return monkeyableBase as T & U;
    }

    /**
     * Template method subclasses can use to find the decorator for this node.
     */
    protected abstract decoratorFor(n: TreeNode): any

    /**
     * Convenience method returning the conventional decorator
     * class name for the node name. Simply adds "Ops" suffix.
     */
    protected decoratorClassName(n: TreeNode) {
        return n.nodeName().charAt(0).toUpperCase() + n.nodeName().substr(1) + "Ops"
    }

}