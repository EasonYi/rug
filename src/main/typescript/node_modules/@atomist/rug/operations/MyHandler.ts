import {Atomist} from './Handler'
import {TreeNode,PathExpression} from '../tree/PathExpression'
import {ContextMatch, MessageBuilder, on} from './Handler'

interface Handler<R,N>{
  // query: PathExpression<R,N>
  // handle(match: ContextMatch<R,N>)
  on<R,N>(pathExpression: string, handler: (m: ContextMatch<R,N>) => void): void
}



declare var atomist: Atomist

class ClosedIssues implements PathExpression<TreeNode, TreeNode> {
  expression: string = "/issue[.state()='closed']"
}


// let handler: Handler = {
//   query: "/issue[.state()='closed']",
//   handle (match: MatchedIssue){
//     return new MessageBuilder()
//       .regarding(match.root())
//       .withAction("AddLicense")
//       .withAction("HelloWorld");
//   }
// }

atomist.on<TreeNode, TreeNode>("/issue[.state()='open']", m => {
   let issue = m.root()
   let message = atomist.messageBuilder().regarding(issue)
   message.withAction(message.actionRegistry().findByName("AddLicense"))
   message.withAction(message.actionRegistry().findByName("HelloWorld"))
   message.send()
})

atomist.on<TreeNode, TreeNode>("/issue[.state()='closed']", m => {
   let issue = m.root()
   atomist.messageBuilder().say("this next message is for :trump:").send()
   let message = atomist.messageBuilder().regarding(issue)
   message.withAction(message.actionRegistry().findByName("AddLicense"))
   message.withAction(message.actionRegistry().findByName("HelloWorld"))
   message.send()
})
